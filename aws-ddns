#!/usr/bin/env bash
# aws-ddns - dynamic DNS for Amazon AWS Route 53
#
# Copyright 2025 Bradley Sepos
# Released under the MIT License. See LICENSE for details.

NAME="aws-ddns"
RDNN="com.bradleysepos.${NAME}"
VERSION="1.0.1"

set -e
set -u

SELF="${0}"
SELF_NAME=$(basename "${SELF}")
SELF_NAME_SPACING=$(for N in $(seq 1 "${#SELF_NAME}"); do echo -n " "; done)
HELP="\
usage: ${SELF_NAME} [-hv]
       ${SELF_NAME} [-f] hosted-zone-id record-name
       ${SELF_NAME} [-f] [-c poll_count] [-e ip-address] [-i ip-provider[,...]]
       ${SELF_NAME_SPACING} [-l local-cache-prefix] [-m comment] [-p profile]
       ${SELF_NAME_SPACING} [-r record-type] [-t ttl]
       ${SELF_NAME_SPACING} hosted-zone-id record-name
where:
   -h  display this help text
   -v  display version information
   -c  poll change status every 10 seconds this many times (default 0)
   -e  external IP address (default unset; use IP provider)
   -f  ignore local cache and force update if external IP or TTL differs
   -i  comma-separated list of plain text external IP address provider url(s)
   -l  local cache prefix (default ~/.aws-ddns)
   -m  record set change comment (default ${NAME} datetime UTC)
   -p  AWS CLI profile (default default)
   -r  record type (default A; AAAA also supported)
   -t  time to live in seconds (default 300)"

# Logs error message and exits
function exit_with_error {
    set +e
    ERROR="${2}"
    echo "${SELF_NAME}: ${ERROR}" >&2
    syslog -s -l error "${SELF_NAME}: ${ERROR}" >/dev/null 2>&1 || :
    PRINT_HELP="${3:-false}"
    if [[ "${PRINT_HELP}" == true ]]; then
        echo -e "${HELP}"
    fi
    exit "${1}"
}

# Arguments
QUERY_REMOTE=false
IPV4_PROVIDERS=('https://ipv4.whatismyip.akamai.com' 'https://ipv4.text.myip.wtf' 'https://ipv4.icanhazip.com' 'https://api.ipify.org' 'https://ifconfig.co')
IPV6_PROVIDERS=('https://ipv6.whatismyip.akamai.com' 'https://ipv6.text.myip.wtf' 'https://ipv6.icanhazip.com' 'https://api6.ipify.org' 'https://ifconfig.co')
IP_PROVIDERS=()
IP=""
CACHE_PREFIX="${HOME}/."
COMMENT="${NAME} $(TZ=UTC date '+%Y-%m-%d-%H%M%S') UTC"
PROFILE="default"
RECORD_TYPE="A"
TTL="300"
POLL_COUNT="0"
OPTIND=1
while getopts ":hvfc:e:i:l:m:p:r:t:" OPT; do
    case "${OPT}" in
        h)
            # Print help and exit
            echo -e "${HELP}"
            exit 0
            ;;
        v)
            # Print version and exit
            echo "${NAME} ${VERSION}"
            exit 0
            ;;
        c)
            # Poll change status count
            POLL_COUNT="${OPTARG}"
            ;;
        e)
            # IP address
            IP="${OPTARG}"
            ;;
        f)
            # Ignore local cache and force update if external IP or TTL differs from remote record
            QUERY_REMOTE=true
            ;;
        i)
            # External IP provider url(s)
            IP_PROVIDERS=($(echo "${OPTARG}" | sed 's/,/ /g'))
            ;;
        l)
            # Local cache prefix
            CACHE_PREFIX="${OPTARG}"
            ;;
        m)
            # Record set change comment
            COMMENT="${OPTARG}"
            ;;
        p)
            # AWS CLI profile
            PROFILE="${OPTARG}"
            ;;
        r)
            # Record type
            RECORD_TYPE="${OPTARG}"
            ;;
        t)
            # Time to live
            TTL="${OPTARG}"
            ;;
        :)
            # Option without required argument
            exit_with_error 1 "${SELF_NAME}: option -${OPTARG} requires a value" true
            ;;
        \?)
            # Invalid option specified
            exit_with_error 1 "${SELF_NAME}: invalid option: -${OPTARG}" true
            ;;
    esac
done
shift $((${OPTIND} - 1))
ZONE_ID="${1:-}"
RECORD_NAME="${2:-}"

# Sanity checks
if [[ "${ZONE_ID}" == "" ]]; then
    exit_with_error 1 "Hosted Zone ID not specified." true
fi
if [[ "${RECORD_NAME}" == "" ]]; then
    exit_with_error 1 "Record name not specified." true
fi
if [[ "${RECORD_TYPE}" != "A" ]] && [[ "${RECORD_TYPE}" != "AAAA" ]]; then
    exit_with_error 1 "Record type ${RECORD_TYPE} not implemented." true
fi
if ! echo "${TTL}" | grep -E '^[0-9]+$' >/dev/null 2>&1; then
    exit_with_error 1 "TTL must be a number." true
fi

# Sanitize record name
if [[ "${RECORD_NAME: -1}" != "." ]]; then
    RECORD_NAME+="."
fi

# Set IP version and providers list
IPV="4"
if [[ "${RECORD_TYPE}" == "AAAA" ]]; then
    IPV="6"
fi
if [[ "${#IP_PROVIDERS[@]}" -eq 0 ]]; then
    if [[ "${IPV}" == "4" ]]; then
        IP_PROVIDERS=("${IPV4_PROVIDERS[@]}")
    else
        IP_PROVIDERS=("${IPV6_PROVIDERS[@]}")
    fi
fi

# Create/verify local cache
CACHE_DIR="${CACHE_PREFIX}${NAME}/${ZONE_ID}/${RECORD_NAME}"
CACHE_FILE="${CACHE_DIR}/${RECORD_TYPE}.txt"
LOG_FILE="${CACHE_DIR}/${RECORD_TYPE}.log"
if [[ ! -d "${CACHE_DIR}" ]]; then
    mkdir -p "${CACHE_DIR}" >/dev/null 2>&1
fi
if [[ ! -e "${CACHE_FILE}" ]]; then
    touch "${CACHE_FILE}" >/dev/null 2>&1
fi
if [[ ! -e "${LOG_FILE}" ]]; then
    touch "${LOG_FILE}" >/dev/null 2>&1
fi
if [[ ! -d "${CACHE_DIR}" ]]     \
   || [[ ! -r "${CACHE_FILE}" ]] \
   || [[ ! -w "${CACHE_FILE}" ]] \
   || [[ ! -r "${LOG_FILE}" ]]   \
   || [[ ! -w "${LOG_FILE}" ]]
then
    exit_with_error 1 "Unable to create/verify local cache."
fi

# Get external IP address
if [[ "${IP}" == "" ]]; then
    for PROVIDER in "${IP_PROVIDERS[@]}"; do
        # Query provider
        IP_TEMP=$(curl -"${IPV}" -s "${PROVIDER}" 2>/dev/null | head -n 1)
        # Check result
        if [[ "${IPV}" == "4" ]] && [[ "${IP_TEMP}" =~ ^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$ ]]; then
            # Exclude reserved ranges
            if [[ "${IP_TEMP}" =~ ^0[.] ]]                      \
                || [[ "${IP_TEMP}" =~ ^10[.] ]]                 \
                || [[ "${IP_TEMP}" =~ ^100[.]6[4-9][.] ]]       \
                || [[ "${IP_TEMP}" =~ ^100[.][7-9][0-9][.] ]]   \
                || [[ "${IP_TEMP}" =~ ^100[.]1[0-1][0-9][.] ]]  \
                || [[ "${IP_TEMP}" =~ ^100[.]12[0-7][.] ]]      \
                || [[ "${IP_TEMP}" =~ ^127[.] ]]                \
                || [[ "${IP_TEMP}" =~ ^169[.]254[.] ]]          \
                || [[ "${IP_TEMP}" =~ ^172[.]1[6-9][.] ]]       \
                || [[ "${IP_TEMP}" =~ ^172[.]2[0-9][.] ]]       \
                || [[ "${IP_TEMP}" =~ ^172[.]3[0-1][.] ]]       \
                || [[ "${IP_TEMP}" =~ ^192[.]0[.]2[.] ]]        \
                || [[ "${IP_TEMP}" =~ ^192[.]88[.]99[.] ]]      \
                || [[ "${IP_TEMP}" =~ ^192[.]168[.] ]]          \
                || [[ "${IP_TEMP}" =~ ^198[.]18[.] ]]           \
                || [[ "${IP_TEMP}" =~ ^198[.]19[.] ]]           \
                || [[ "${IP_TEMP}" =~ ^198[.]51[.]100[.] ]]     \
                || [[ "${IP_TEMP}" =~ ^203[.]0[.]113[.] ]]      \
                || [[ "${IP_TEMP}" =~ ^22[4-9][.] ]]            \
                || [[ "${IP_TEMP}" =~ ^2[3-4][0-9][.] ]]        \
                || [[ "${IP_TEMP}" =~ ^25[0-5][.] ]]
            then
                continue 2
            fi
            # IP seems valid
            IP="${IP_TEMP}"
            break
        elif [[ "${IPV}" == "6" ]] && [[ "${IP_TEMP}" =~ ^[0-9a-f:.]+$ ]]; then
            # Exclude reserved ranges
            if [[ "${IP_TEMP}" =~ ^::1?$ ]] \
                || [[ "${IP_TEMP}" =~ ^0{0,2}64:ff9b:0{0,3}1:.+$ ]]              \
                || [[ "${IP_TEMP}" =~ ^0?100:.+$ ]]                        \
                || [[ "${IP_TEMP}" =~ ^2001:(:|0{1,4}:.+)$ ]]                     \
                || [[ "${IP_TEMP}" =~ ^2001:2[0-9a-f]:.+$ ]]                     \
                || [[ "${IP_TEMP}" =~ ^2001:db8:.+$ ]]                     \
                || [[ "${IP_TEMP}" =~ ^2002:.+$ ]]                     \
                || [[ "${IP_TEMP}" =~ ^3fff:(:|0?fff:.+)$ ]]                \
                || [[ "${IP_TEMP}" =~ ^5f00:.+$ ]]                         \
                || [[ "${IP_TEMP}" =~ ^f([c-d]|f)[0-9a-f]{2}:.+$ ]]        \
                || [[ "${IP_TEMP}" =~ ^fe80:(:|(0{1,4}:){3}.+)$ ]]  \
                || [[ "${IP_TEMP}" =~ ^(.+:ffff:(0{1,4}:)?|0{0,2}64:ff9b::)([0-9a-f]{1,4}(:[0-9a-f]{1,4})?$|[0-9a-f]{4}$|((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])))$ ]]
            then
                continue 2
            fi
            # IP seems valid
            IP="${IP_TEMP}"
            break
        fi
    done
fi
if [[ "${IP}" == "" ]]; then
    exit_with_error 1 "Unable to determine external IP address."
fi

# Check whether update is necessary
IP_CURRENT=""
TTL_CURRENT=""
if [[ "${QUERY_REMOTE}" == true ]]; then
    RESULT=$(aws --profile="${PROFILE}" route53 list-resource-record-sets --hosted-zone "${ZONE_ID}" --starting-token "${RECORD_NAME}" --max-items 1 --output text 2>/dev/null)
    if [[ "$?" -eq 0 ]]; then
        IP_CURRENT=$(echo "${RESULT}" | grep -E '^RESOURCERECORDS[^A-Z]' | awk '{ print $2 }' 2>&1)
        TTL_CURRENT=$(echo "${RESULT}" | grep -E '^RESOURCERECORDSETS' | awk '{ print $3 }' 2>&1)
    else
        exit_with_error 1 "Unable to query AWS."
    fi
else
    RESULT=($(cat "${CACHE_FILE}" 2>/dev/null | head -n 1))
    if [[ "$?" -eq 0 ]]; then
        if [[ "${#RESULT[@]}" -gt 0 ]]; then
            IP_CURRENT="${RESULT[0]}"
            TTL_CURRENT="${RESULT[1]}"
        fi
    else
        exit_with_error 1 "Unable to query local cache."
    fi
fi
if [[ "${IP_CURRENT}" == "${IP}" ]] && [[ "${TTL_CURRENT}" == "${TTL}" ]]; then
    # Already up to date
    echo "Already up to date."
    # Cache IP address
    echo "${IP} ${TTL}" > "${CACHE_FILE}"
    # Done
    exit 0
fi

# Digest for AWS
set +e
read -r -d '' DIGEST << EndDigest
{
  "HostedZoneId": "${ZONE_ID}",
  "ChangeBatch": {
    "Comment": "${COMMENT}",
    "Changes": [
      {
        "Action": "UPSERT",
        "ResourceRecordSet": {
          "Name": "${RECORD_NAME}",
          "Type": "${RECORD_TYPE}",
          "ResourceRecords": [
            {
              "Value": "${IP}"
            }
          ],
          "TTL": ${TTL}
        }
      }
    ]
  }
}
EndDigest
set -e

# Push changes
CHANGE_ID=""
CHANGE_STATUS=""
RESULT=$(aws --profile="${PROFILE}" route53 change-resource-record-sets --cli-input-json "${DIGEST}" --output text >> >(tee -a "${LOG_FILE}") 2>> "${LOG_FILE}")
if [[ "$?" -eq 0 ]]; then
    RESULT_PARTIAL=$(echo "${RESULT}" | grep -Eo '/change/[^[:space:]]+[[:space:]]+[A-Z]+' 2>/dev/null)
    CHANGE_ID=$(echo "${RESULT_PARTIAL}" | awk '{ print $1 }' 2>/dev/null)
    CHANGE_STATUS=$(echo "${RESULT_PARTIAL}" | awk '{ print $2 }' 2>/dev/null)
    if [[ ! "${CHANGE_ID}" =~ ^\/change\/.+ ]] || [[ "${CHANGE_STATUS}" == "" ]]; then
        exit_with_error 1 "Unable to parse AWS response."
    fi
else
    exit_with_error 1 "AWS returned an error, log exists at ${LOG_FILE}"
fi

# Poll and log change status
COUNT=0
RESULT=""
while [[ "${CHANGE_STATUS}" != "INSYNC" ]] && [[ "${COUNT}" -lt "${POLL_COUNT}" ]]; do
    sleep 10
    COUNT=$((COUNT + 1))
    RESULT=$(aws --profile="${PROFILE}" route53 get-change --id "${CHANGE_ID}" --output text >> >(tee -a "${LOG_FILE}") 2>> "${LOG_FILE}")
    if [[ "$?" -eq 0 ]]; then
        RESULT_PARTIAL=$(echo "${RESULT}" | grep -Eo '/change/[^[:space:]]+[[:space:]]+[A-Z]+' 2>/dev/null)
        CHANGE_STATUS=$(echo "${RESULT_PARTIAL}" | awk '{ print $2 }' 2>/dev/null)
        if [[ "${CHANGE_STATUS}" == "" ]]; then
            exit_with_error 1 "Unable to parse AWS response."
        fi
    else
        exit_with_error 1 "AWS returned an error, log exists at ${LOG_FILE}"
    fi
done

# Store IP address and TTL in local cache
echo "${IP} ${TTL}" > "${CACHE_FILE}"

# Trim log
MAX_LOG_LINES=100
LOG_LINES=$(wc -l < "${LOG_FILE}")
if [[ "${LOG_LINES}" -gt "${MAX_LOG_LINES}" ]]; then
    START_LINE=$((LOG_LINES - MAX_LOG_LINES))
    sed -i.bak "1,${START_LINE}d" "${LOG_FILE}" >/dev/null 2>&1
    rm -f "${LOG_FILE}.bak" >/dev/null 2>&1
fi

# Done
exit 0
